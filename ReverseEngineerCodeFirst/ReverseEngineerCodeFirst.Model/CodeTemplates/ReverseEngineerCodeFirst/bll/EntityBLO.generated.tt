<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter name="bllNS" type="System.String" #>
<#@ parameter name="dalNS" type="System.String" #>
<#@ parameter name="modelsNS" type="System.String" #>
<#@ parameter name="dtoNS" type="System.String" #>
<#@ parameter name="bloNS" type="System.String" #>
<#@ parameter name="blo" type="System.String" #>
<#@ parameter name="dto" type="System.String" #>
<#@ parameter name="efHost" type="Microsoft.DbContextPackage.Utilities.EfTextTemplateHost" #>
<#
  //var efHost = (EfTextTemplateHost)Host;
  var entityName = efHost.EntityType.Name;
  var entityLowerName = entityName.ToLower();

  var entityBLO = entityName + blo;
  var entityDTO = entityName + dto;
#>
using System.Collections.Generic;
using <#= bllNS #>.StructureMap;
using <#= bloNS #>.Base;
using <#= dtoNS #>;
using <#= dtoNS #>.Mapping;
using <#= dalNS #>.Services.Interfaces;
using <#= dalNS #>.Services.Interfaces.Base;
using <#= modelsNS #>.Models;

namespace <#= bloNS #>
{
	public partial class <#= entityBLO #> : Base<#= blo #><<#= entityName #>>
  {

    public static <#= entityBLO #> GetInstance()
    {
      return InstanceFactory.GetInstance<<#= entityBLO #>>();
    }

    public I<#= entityName #>Service Service { get { return _<#= entityLowerName #>Service; } }

    private readonly I<#= entityName #>Service _<#= entityLowerName #>Service;
    private readonly IUnitOfWork _uow;

    public <#= entityBLO #>(I<#= entityName #>Service <#= entityLowerName #>Service, IUnitOfWork uow)
      : base(<#= entityLowerName #>Service, uow)
    {
      _<#= entityLowerName #>Service = <#= entityLowerName #>Service;
      _uow = uow;
    }

    public <#= entityDTO #> Get<#= entityName #>(long id)
    {
      return <#= entityDTO #>Mapper.From(Get(id));
    }

    public IList<<#= entityDTO #>> GetAll<#= entityName #>s()
    {
      return <#= entityDTO #>Mapper.From(GetAll());
    }

    public int Add<#= entityName #>(<#= entityDTO #> dto)
    {
      return Add(<#= entityDTO #>Mapper.To(dto));
    }

    public int Edit<#= entityName #>(<#= entityName #><#= dto #> dto)
    {
      return Edit(<#= entityDTO #>Mapper.To(dto));
    }

    public int Delete<#= entityName #>(long id)
	  {
	    return Delete(id);
	  }
  }
}
