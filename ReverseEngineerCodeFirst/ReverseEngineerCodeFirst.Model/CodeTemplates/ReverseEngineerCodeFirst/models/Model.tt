<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="Microsoft.CSharp"#>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Metadata.Edm" #>
<#@ import namespace="Microsoft.CSharp.RuntimeBinder"#>
<#@ parameter name="dtoNS" type="System.String" #>
<#@ parameter name="modelsNS" type="System.String" #>
<#@ parameter name="dto" type="System.String" #>
<#@ parameter name="efHost" type="Microsoft.DbContextPackage.Utilities.EfTextTemplateHost" #>
<#@ parameter name="codeObject" type="System.Object" #>
<#@ parameter name="accessibilityForProperty" type="System.Object" #><#
  var AccessibilityForProperty = (Func<EdmMember, string>)accessibilityForProperty;
  dynamic code = codeObject;
#>
using System;
using System.Collections.Generic;

namespace <#= code.EscapeNamespace(efHost.Namespace) #>
{
  public partial class <#= efHost.EntityType.Name #>
  {
<#
    var collectionNavigations = efHost.EntityType.NavigationProperties.Where(
        np => np.DeclaringType == efHost.EntityType
            && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);

    // Add a ctor to initialize any collections
    if (collectionNavigations.Any())
    {
#>
    public <#= code.Escape(efHost.EntityType) #>()
    {
<#
        foreach (var navProperty in collectionNavigations)
        {
#>
      <#= code.Escape(navProperty) #> = new List<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>>();
<#
        }
#>
    }

<#
    }
        
    foreach (var property in efHost.EntityType.Properties)
    {
        var typeUsage = code.Escape(property.TypeUsage);

        // Fix-up spatial types for EF6
        if (efHost.EntityFrameworkVersion >= new Version(6, 0)
            && typeUsage.StartsWith("System.Data.Spatial."))
        {
            typeUsage = typeUsage.Replace(
                "System.Data.Spatial.",
                "System.Data.Entity.Spatial.");
        }
#>
    <#= AccessibilityForProperty(property) #> <#= typeUsage #> <#= code.Escape(property) #> { get; set; }
<#
    }#>

    //Navigation Properties
<#

    foreach (var navProperty in efHost.EntityType.NavigationProperties.Where(np => np.DeclaringType == efHost.EntityType))
    {
        if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
        {
#>
    public virtual ICollection<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>> <#= code.Escape(navProperty) #> { get; set; }
<#
        }
        else
        {
#>
    public virtual <#= code.Escape(navProperty.ToEndMember.GetEntityType()) #> <#= code.Escape(navProperty) #> { get; set; }
<#
        }
    }
#>
  }
}
